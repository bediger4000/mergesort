package main

import (
	"flag"
	"fmt"
	"os"
	"runtime"
	"time"
	"unsafe"
)

// Node is an element of a linked list
type Node struct {
	Data uint
	Next *Node
}

func main() {
	printList := flag.Bool("p", false, "print list before and after weaving")
	reuseList := flag.Bool("R", false, "re-use list for all 10 iterations of a list length")
	addressOrderedList := flag.Bool("m", false, "create address-ordered list for each sort")
	countIncrement := flag.Int("i", 200000, "increment of list size")
	countBegin := flag.Int("b", 1000, "beginning list size")
	countUntil := flag.Int("u", 18000000, "sort lists up to this size")
	flag.Parse()

	hostname, _ := os.Hostname() // not going to fail
	fmt.Printf("# weaving nodes iteratively at %s on %s\n", time.Now().Format(time.RFC3339), hostname)
	fmt.Printf("# Start at %d nodes, end before %d nodes, increment %d\n",
		*countBegin, *countUntil, *countIncrement)
	listType := "idomatic"
	if *addressOrderedList {
		listType = "memory address"
	}
	fmt.Printf("# %s list ordering\n", listType)
	if *reuseList {
		fmt.Println("# re-random-value and re-use list")
	}

	var listCreation func(int) *Node
	listCreation = randomValueList
	if *addressOrderedList {
		listCreation = memoryOrderedList
	}

	for n := *countBegin; n < *countUntil; n += *countIncrement {
		var total time.Duration
		var looping time.Duration
		var head *Node
		if *reuseList {
			head = listCreation(n)
			runtime.GC()
		}
		for i := 0; i < 10; i++ {
			if !*reuseList {
				// fresh, new list every iteration
				head = listCreation(n)
				runtime.GC()
			}

			if *printList {
				Print(head)
			}

			before := time.Now()
			head := weave(head)
			elapsed := time.Since(before)
			total += elapsed

			if *printList {
				Print(head)
			}

			length := 0
			for ; head != nil; head = head.Next {
				length++
			}
			if length != n {
				fmt.Printf("# iteration %d, found woven list to be %d long, should be %d\n", i, length, n)
			}

			elapsed = time.Since(before)
			looping += elapsed
		}
		total /= 10.0
		fmt.Printf("%d\t%.04f\t%.04f\n", n, total.Seconds(), looping.Seconds())
	}

	fmt.Printf("# ending at %s on %s\n", time.Now().Format(time.RFC3339), hostname)
}

func randomValueList(n int) *Node {

	var head *Node

	for i := 0; i < n; i++ {
		head = &Node{
			Data: uint(i),
			Next: head,
		}
	}

	return head
}

func memoryOrderedList(n int) *Node {

	head := &Node{}
	head.Data = uint(uintptr(unsafe.Pointer(head)))
	tail := head

	// Append new *Node to end of list - this will create
	// a list that has blocks of nodes in descending address order
	for i := 1; i < n; i++ {
		nn := &Node{}
		nn.Data = uint(uintptr(unsafe.Pointer(nn)))
		tail.Next = nn
		tail = tail.Next
	}

	// sort all nodes by address, so that even blocks of nodes are
	// ordered by ascending address.
	return recursiveMergeSort(head)
}

// Print runs a linked list and prints its values on stdout
func Print(list *Node) {
	for node := list; node != nil; node = node.Next {
		fmt.Printf("%d -> ", node.Data)
	}
	fmt.Println()
}

func weave(head *Node) *Node {

	var hd, tl *Node
	appnd := func(n *Node) {
		if hd == nil {
			hd = n
			tl = n
			return
		}
		tl.Next = n
		tl = n
	}

	p := head
	mergecount := 2 // just to pass the first for-test

	// The final pass over the unsorted linked list merges
	// two lists each of about half the number of nodes.
	// mergecount will have value 1 in that case. Don't
	// need to loop again.
	for k := 1; mergecount > 1; k *= 2 {

		mergecount = 0

		for p != nil {

			psize := 0
			q := p
			for i := 0; q != nil && i < k; i++ {
				psize++
				q = q.Next
			}

			qsize := psize

			for psize > 0 && qsize > 0 && q != nil {
				if (psize % 2) == 1 {
					appnd(p)
					p = p.Next
					psize--

					appnd(q)
					q = q.Next
					qsize--
				} else {
					appnd(q)
					q = q.Next
					qsize--

					appnd(p)
					p = p.Next
					psize--
				}
			}

			for ; psize > 0 && p != nil; psize-- {
				appnd(p)
				p = p.Next
			}

			for ; qsize > 0 && q != nil; qsize-- {
				appnd(q)
				q = q.Next
			}

			p = q

			mergecount++
		}

		p = hd
		head = hd

		hd = nil
		tl.Next = nil
		tl = nil
	}

	return head
}

func recursiveMergeSort(head *Node) *Node {
	if head.Next == nil {
		// single node list is sorted by definiton
		return head
	}

	// because of recursion bottoming out at a 1-long-list,
	// head points to a list of at least 2 elements.

	// Setting rabbit and turtle like this means we split an
	// odd-length-list (head) into lists of length n (right)
	// and n+1 (left).
	rabbit, turtle := head.Next, &head

	for rabbit != nil {
		turtle = &(*turtle).Next
		if rabbit = rabbit.Next; rabbit != nil {
			rabbit = rabbit.Next
		}
	}

	right := *turtle
	*turtle = nil

	left := recursiveMergeSort(head)
	right = recursiveMergeSort(right)

	// Set h, t variables so that the loop doing the merge
	// does not have to have a "if h == nil" check every iteration.
	x := &right
	if left.Data < right.Data {
		x = &left
	}

	h, t := *x, *x
	*x = (*x).Next

	// left and right are either equal in length, or right is one
	// node longer, but the "<" check might take more from one list
	// than the other. Have to check both for nil.
	for left != nil && right != nil {
		n := &right
		if left.Data < right.Data {
			n = &left
		}
		t.Next = *n
		*n = (*n).Next
		t = t.Next
		// At the end of this for-loop, t.Next ends up being nil
		// because of the left/right list splitting.
	}

	// Either left or right are nil. If left == nil,
	// assigning nil to t.Next is no issue.
	t.Next = left
	if right != nil {
		// but if right is nil, can't assign nil to t.Next,
		// because left was non-nil.
		t.Next = right
	}

	return h
}
